# 여러개의 벡터들의 합

def vector_sum(vectors):
    result = vectors[0]
    for vector in vectors[1:]:
        result = vector_add(result, vector)
    return result
vectors = [[1, 2, 3],
           [2, 3, 0],
           [0, 1, -2]]
vector_sum(vectors)

#reduce  - 두 인자를 가지는 함수를 리스트의 왼쪽에서 오른쪽으로 누적 적용하여 리스트를 단일 값으로 줄이는 함수

from functools import reduce
def vector_sum(vectors):
    return reduce(vector_add, vectors)

def vector_sum(vectors):
    return reduce(lambda v, w: [v_i + w_i for v_i, w_i in zip(v,w)], vectors)

vectors = [[1, 2, 3],
           [2, 3, 0],
           [0, 1, -2]]
vector_sum(vectors)

vector_add(vector_add([1, 2, 3], [2, 3, 0]), [0, 1, -2])

# 스칼라 곱

def scalar_multiply(c, v):
    return [c * vi for vi in v]
scalar_multiply(3, [1, 2, 3])

# 컴포넌트별 평균 (시험언급)

def vector_mean(vectors):
    n = len(vectors)
    return scalar_multiply(1/n, vector_sum(vectors))
vector_mean([[1, 2], [2, 4], [3, 6]])

# 내적
def dot(v, w):
    """v_1 * w_1 + ... + v_n * w_n"""
    return sum(v_i * w_i for v_i, w_i in zip(v, w))
dot([1, 2, 3], [0, 1, 2])

#제곱합
def sum_of_squares(v):
    """v_1 * v_1 + ... + v_n * v_n"""
    return dot(v, v)
sum_of_squares([0, 1, 2])

#벡터의 크기 : 제곱합의 제곱근
import math
def magnitude(v):
    return math.sqrt(sum_of_squares(v))
magnitude([3, 4])

#벡터 사이의 거리
def distance(v, w):
    return magnitude(vector_subtract(v, w))
distance([1, 2], [2, 3])